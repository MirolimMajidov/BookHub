name: Versioning

on:
  workflow_call:
    inputs:
      PROJECT_PATH:
        required: true
        type: string

jobs:
  update_version_and_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Increase version number
        id: update_version
        run: |
          # Get the current branch name
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")

          # Extract current version from the .csproj file
          VERSION=$(grep '<Version>' ${{ inputs.PROJECT_PATH }} | sed -e 's/<[^>]*>//g' || echo "1.0.0")

          # Split the version into major, minor, and patch components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Set default values if components are empty
          MAJOR=${MAJOR:-1}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # Increment the patch version and check if it hits 100
          PATCH=$((PATCH+1))
          if [ "$PATCH" -ge 100 ]; then
            PATCH=0
            MINOR=$((MINOR+1))
          fi

          # Create the new version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"

          # Remove leading and trailing spaces
          NEW_VERSION=$(echo "$NEW_VERSION" | xargs)

          echo "New version: $NEW_VERSION"

          # Ensure the .csproj file has a <Version> tag
          if grep -q '<Version>' ${{ inputs.PROJECT_PATH }}; then
            # Replace the version in the .csproj file
            sed -i "s/<Version>.*<\/Version>/<Version>$NEW_VERSION<\/Version>/" ${{ inputs.PROJECT_PATH }}
          else
            # Add the version tag if not present
            sed -i "s|</Project>|<PropertyGroup><Version>$NEW_VERSION</Version></PropertyGroup></Project>|" ${{ inputs.PROJECT_PATH }}
          fi

          # Save the new version as an environment variable
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

          # Set up git
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Commit and push the updated .csproj file back to the same branch
          git checkout "$BRANCH_NAME" || git checkout -b "$BRANCH_NAME"
          git add ${{ inputs.PROJECT_PATH }}
          git commit -m "Update version to $NEW_VERSION"
          git push origin "$BRANCH_NAME" || true

      - name: Create a Git tag for the new version
        id: create_tag
        run: |
          git tag "v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"
